rm(list=ls())
# Load R package for printing
library(knitr)
library(kableExtra)
# load the data
#mydata <- read.csv("./challenger_data.csv")
mydata <- read.csv("https://raw.githubusercontent.com/georgios-stats/Bayesian_Statistics/master/ComputerPracticals/scripts/challenger_data.csv")
# print data
## (that's a sophisticated command with fancy output, feel free to ignore it)
kable(mydata)%>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Load JAGS
library(rjags)
# init <- list( betaT = rep(0,dmax),
#               ind = rep(0,dmax-1),
#               pp = 0.5)
hierarhicalmodel="
model {
for (i in 1:n) {
mean[i] <- exp(inprod(X[i,],beta)) / (1+exp(inprod(X[i,],beta)))
y[i] ~ dbern(mean[i])
}
betaT[1] ~ dnorm( 0 , 0.1 )
beta[1] <- betaT[1]
pp ~ dbeta(1.0,1.0)
for (j in 1:(dmax-1)) {
ind[j] ~ dbern( pp )
betaT[j+1] ~ dnorm( 0 , 0.1 )
beta[j+1] <- ind[j] * betaT[j+1]
}
}
"
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
rm(list=ls())
# Load R package for printing
library(knitr)
library(kableExtra)
# load the data
#mydata <- read.csv("./challenger_data.csv")
mydata <- read.csv("https://raw.githubusercontent.com/georgios-stats/Bayesian_Statistics/master/ComputerPracticals/scripts/challenger_data.csv")
# print data
## (that's a sophisticated command with fancy output, feel free to ignore it)
kable(mydata)%>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Load JAGS
library(rjags)
# init <- list( betaT = rep(0,dmax),
#               ind = rep(0,dmax-1),
#               pp = 0.5)
hierarhicalmodel="
model {
for (i in 1:n) {
mean[i] <- exp(inprod(X[i,],beta)) / (1+exp(inprod(X[i,],beta)))
y[i] ~ dbern(mean[i])
}
betaT[1] ~ dnorm( 0 , 0.1 )
beta[1] <- betaT[1]
pp ~ dbeta(1.0,1.0)
for (j in 1:(dmax-1)) {
ind[j] ~ dbern( pp )
betaT[j+1] ~ dnorm( 0 , 0.1 )
beta[j+1] <- ind[j] * betaT[j+1]
}
}
"
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
# write your R code
rm(list=ls())
# Load R package for printing
library(knitr)
library(kableExtra)
# load the data
#mydata <- read.csv("./challenger_data.csv")
mydata <- read.csv("https://raw.githubusercontent.com/georgios-stats/Bayesian_Statistics/master/ComputerPracticals/scripts/challenger_data.csv")
# print data
## (that's a sophisticated command with fancy output, feel free to ignore it)
kable(mydata)%>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Load JAGS
library(rjags)
# init <- list( betaT = rep(0,dmax),
#               ind = rep(0,dmax-1),
#               pp = 0.5)
hierarhicalmodel="
model {
for (i in 1:n) {
mean[i] <- exp(inprod(X[i,],beta)) / (1+exp(inprod(X[i,],beta)))
y[i] ~ dbern(mean[i])
}
betaT[1] ~ dnorm( 0 , 0.1 )
beta[1] <- betaT[1]
pp ~ dbeta(1.0,1.0)
for (j in 1:(dmax-1)) {
ind[j] ~ dbern( pp )
betaT[j+1] ~ dnorm( 0 , 0.1 )
beta[j+1] <- ind[j] * betaT[j+1]
}
}
"
y_obs <- mydata[ -nrow(mydata) , 4 ] # exclude the last row, and use only the 4th column
y_obs <- as.numeric(y_obs==1)        # make it numeric
n_obs <- length( y_obs )
X_obs <- cbind( rep(1,n_obs),
as.numeric(mydata[ -nrow(mydata),3]),
as.numeric(mydata[ -nrow(mydata),5]),
as.numeric(mydata[ -nrow(mydata),3]) *as.numeric(mydata[ -nrow(mydata),5])  )
# Units correction
X_obs[,2] <- (X_obs[,2]-mean(X_obs[,2])) / sd(X_obs[,2])
X_obs[,3] <- (X_obs[,3]-mean(X_obs[,3])) / sd(X_obs[,3])
X_obs[,4] <- (X_obs[,4]-mean(X_obs[,4])) / sd(X_obs[,4])
dmax = dim(X_obs)[2]
data.bayes <- list(y = y_obs,
X = X_obs,
n = n_obs,
dmax = dmax)
model.smpl <- jags.model( file = textConnection(hierarhicalmodel),
data = data.bayes)
adapt(object = model.smpl,
n.iter = 10^5)
N = 10^5
n.thin = 10^1
n.iter = N * n.thin
output = jags.samples( model = model.smpl,
variable.names = c("ind","beta"),
n.iter = n.iter,
thin = n.thin,
)
save.image(file="BernoulliRegressionModelVS.RData")
names(output)
dim( output$beta )
dim( output$ind )
# the first dimension is the numbers of columns of the variable
# the second dimention is the size of the sample drawn
# the thirs dimention is the number of the sub-samples drawn (in our case it is just 1)
ind.smpl <-output$ind
beta.smpl <-output$beta
# Compute the marginal distributions
pr_1 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==0))
pr_2 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==0))
pr_3 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==0))
pr_4 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==0))
pr_5 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==1))
pr_6 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==1))
pr_7 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==1))
pr_8 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==1))
# Print the marginal distributions
pr_1
pr_2
pr_3
pr_4
pr_5
pr_6
pr_7
pr_8
# plot the probabilities
Pr <- c(pr_1, pr_2,pr_3, pr_4, pr_5, pr_6, pr_7, pr_8)
M <- c(1:8)
barplot(Pr,
names.arg = c('I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VII'),
xlab = 'model',
ylab = 'Pr(model)',
main = 'marginal model posterior prob.')
# Compute the marginal distributions
pr_1 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==0))
pr_2 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==0)* as.numeric(ind.smpl[3,,]==0))
pr_3 = mean(as.numeric(ind.smpl[1,,]==0) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==0))
pr_4 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==0))
pr_5 = mean(as.numeric(ind.smpl[1,,]==1) * as.numeric(ind.smpl[2,,]==1)* as.numeric(ind.smpl[3,,]==1))
pr_12345 = pr_1+pr_2+pr_3+pr_4+pr_5
# Compute the conditional distributions
pr_1 = pr_1/pr_12345
pr_2 = pr_2/pr_12345
pr_3 = pr_3/pr_12345
pr_4 = pr_4/pr_12345
pr_5 = pr_4/pr_12345
# Print the conditional distributions
pr_1
pr_2
pr_3
pr_4
pr_5
# plot the probabilities
Pr <- c(pr_1, pr_2, pr_3, pr_4, pr_5)
barplot(Pr,
names.arg = c('I', 'II', 'III', 'IV', 'V'),
xlab = 'model',
ylab = 'Pr(model)',
main = 'marginal model posterior prob.')
